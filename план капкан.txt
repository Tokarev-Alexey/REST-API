Имя проекта: A new beginning

#backup DB
sudo mysqldump -u matata -p -h localhost firstdb > backup.sql

#экспорт определенных моделей
python manage.py dumpdata <app_name>.<model_name> > fixturename.json

# Экспорт ВСЕХ данных проекта
python manage.py dumpdata > all_data.json

+ Этап 1: Настройка окружения и базовой структуры

  Утренняя сессия (3 часа)
	Создать директорию проекта и активировать виртуальное окружение с помощью Pipenv
	Установить основные зависимости: Django и mysqlclient
	Создать Django проект с именем a_new_begining
	Создать три основных приложения: posts, users, api
	Настроить базовый файл .gitignore для исключения служебных файлов

  Дневная сессия (4 часа)
	Настроить подключение к базе данных MySQL в settings.py
	Указать корректные параметры подключения: имя базы, пользователь, пароль
	Добавить опции для поддержки кодировки utf8mb4
	Создать базу данных blog_db в MySQL с правильной кодировкой
	Добавить созданные приложения в INSTALLED_APPS
	Выполнить первоначальные миграции базы данных

+ Этап 2: Модели и административная панель

  Утренняя сессия (3 часа)
	Определить модели данных в приложении posts:
	Модель Post с полями: заголовок, содержание, автор, дата создания
	Модель Comment с полями: связь с постом, автор, содержание, дата создания
	Модель ProfileUser с полями: subscriptions, avatar
	Настроить связи между моделями с помощью ForeignKey, для подписоты ManyToManyField
	Реализовать строковое представление моделей через метод str
  Дневная сессия (4 часа)
	Зарегистрировать все модели в административной панели (admin.py)
	Настроить отображение моделей в админке:
	Для модели Comment добавить отображение: пост, автор, дата создания
	Добавить возможность фильтрации по посту и автору
	Реализовать поиск по содержанию комментария
	Создать и применить миграции для новых моделей
	Создать учетную запись суперпользователя
	Проверить работу административного интерфейса

+ Этап 3: Настройка REST API (часть 1)

  Утренняя сессия (3 часа)
	Установить Django REST Framework
	Добавить DRF и поддержку токенов в INSTALLED_APPS
	Настроить базовые параметры REST_FRAMEWORK в settings.py:
	Указать классы аутентификации (TokenAuthentication, SessionAuthentication)
	Вам также потребуется создать токены для своих пользователей.

        from rest_framework.authtoken.models import Token
        token = Token.objects.create(user=...)
        print(token.key)

	Определить классы разрешений (IsAuthenticatedOrReadOnly)
	Настроить пагинацию (PageNumberPagination с размером страницы 10)
  Дневная сессия (4 часа)
	Создать сериализаторы для всех моделей в api/serializers.py
	Для моделей Post и Comment реализовать вложенные сериализаторы
	Сериализатор Comment должен включать все необходимые поля
	Сериализатор User должен включать основные поля модели пользователя
	Все сериализаторы должны поддерживать необходимые операции (чтение, запись)

+ Этап 4: Настройка REST API (часть 2) и аутентификация

  Утренняя сессия (3 часа)
	Создать ViewSet для всех моделей в api/views.py
	Создать CommentViewSet с поддержкой всех CRUD операций
	Настроить права доступа для каждого ViewSet
	Для операций создания постов и комментариев автоматически устанавливать текущего пользователя
	Реализовать правильное ordering для QuerySet (по дате создания)
  Дневная сессия (4 часа)
	Настроить маршрутизацию API с помощью DefaultRouter
	Зарегистрировать маршруты для CommentViewSet
	Подключить API URLs в основном файле urls.py проекта
	Добавить маршруты для аутентификации через rest_framework.urls
	Установить и настроить django-rest-framework-simplejwt для JWT аутентификации
	Подключить endpoints аутентификации в основные URLs

+ Этап 5: Пользовательские endpoints и настройка CORS

  Утренняя сессия (3 часа)
	Установить и настроить django-cors-headers
	Добавить CORS middleware в правильное положение
	Настроить разрешение запросов для всех доменов (для разработки)
	Создать кастомные API endpoints:
	Endpoint для ленты пользователя (посты авторов, на которых подписан пользователь)
	Endpoint для переключения статуса подписки на автора
	Endpoint для получения комментариев к конкретному посту
  Дневная сессия (4 часа)
	Добавить кастомные URLs в маршрутизацию API
	Создать фикстуры для тестовых данных пользователей, постов и комментариев
	Реализовать management command для генерации тестовых данных
	или
	Команда должна создавать пользователей, посты, комментарии и подписки
	или
	Использовать библиотеку Faker для генерации правдоподобных данных комментариев

Этап 6: Тестирование и документация API

  Утренняя сессия (3 часа)
	Установить инструменты для тестирования: pytest, pytest-django, coverage
	Настроить конфигурацию pytest через pytest.ini
	Написать тесты для моделей приложения posts
	Проверить создание комментариев и их связь с постами
	Проверить строковое представление моделей
	Убедиться в корректности связей между комментариями и постами
  Дневная сессия (4 часа)
	Написать тесты для API endpoints
	Протестировать создание, получение и удаление комментариев
	Протестировать доступ к API без аутентификации
	Проверить работу API с аутентификацией
	Убедиться в корректности работы пользовательской ленты
	Запустить тесты и проверить покрытие кода
	Установить и настроить drf-yasg для документации API
	Добавить маршруты для документации (Swagger и ReDoc)

Этап 7: Финализация и подготовка к продакшену

  Утренняя сессия (3 часа)
	Настроить обслуживание статических файлов и медиа-контента
	Создать базовый Dockerfile и docker-compose.yml для контейнеризации
	Создать базовые шаблоны для возможного будущего фронтенда
	Реализовать базовый шаблон с основной структурой HTML
	Добавить блоки для расширения в дочерних шаблонах
	Настроить параметры для production-режима:
	Отключить debug-режим
	Указать разрешенные хосты
  Дневная сессия (4 часа)
	Экспортировать зависимости в requirements.txt
	Создать подробную документацию в README.md:
	Инструкции по установке и запуску
	Описание ключевых API endpoints
	Примеры запросов для работы с комментариями
	Примеры использования API
	Протестировать полный цикл работы приложения:
	Сгенерировать тестовые данные
	Запустить сервер разработки
	Проверить доступность всех ключевых компонентов


Рекомендации по дальнейшей разработке

	Добавить кэширование с помощью Redis
	Настроить Celery для фоновых задач
	Реализовать полнотекстовый поиск
	Добавить систему уведомлений
	Настроить мониторинг и логирование
	Примечания по реализации
	Все модели должны поддерживать строковое представление
	API должно возвращать данные в формате, удобном для фронтенда
	Аутентификация должна работать через токены и сессии
	Тесты должны покрывать основные сценарии использования
	Документация API должна быть доступна через Swagger UI